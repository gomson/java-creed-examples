/*
 * #%L
 * Testing Swing Application
 * $Id:$
 * $HeadURL:$
 * %%
 * Copyright (C) 2012 - 2014 Java Creed
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.javacreed.examples.test;

import java.io.File;
import java.lang.Thread.UncaughtExceptionHandler;
import java.nio.file.InvalidPathException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

import org.easymock.EasyMock;
import org.junit.Assert;
import org.junit.Test;

public class OnOpenTest {

  @Test
  public void testExistentFile() throws Throwable {
    final File returnFile = File.createTempFile("Some File", "csv");
    returnFile.deleteOnExit();
    Assert.assertTrue(returnFile.isFile());

    final View view = EasyMock.createStrictMock(View.class);
    EasyMock.expect(view.showOpenFileChooser(null)).andReturn(returnFile);
    view.setEditableData(EasyMock.eq(""));
    EasyMock.replay(view);

    final ApplicationPresenter presenter = new ApplicationPresenter();
    presenter.setView(view);
    presenter.onOpen();

    // Spin Wait
    while (!presenter.isDone()) {
      TimeUnit.SECONDS.sleep(1);
    }

    EasyMock.verify(view);
  }

  @Test
  public void testInvalidPathException() throws Throwable {
    final AtomicReference<Throwable> exception = new AtomicReference<>();
    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {
      @Override
      public void uncaughtException(final Thread t, final Throwable e) {
        exception.compareAndSet(null, e);
      }
    });

    final File returnFile = EasyMock.createStrictMock(File.class);
    EasyMock.expect(returnFile.isFile()).andReturn(true);
    EasyMock.expect(returnFile.toPath()).andThrow(new InvalidPathException("Test", "Test Exception"));

    final View view = EasyMock.createStrictMock(View.class);
    EasyMock.expect(view.showOpenFileChooser(null)).andReturn(returnFile);
    view.showWarning(EasyMock.eq("Load File"), EasyMock.eq("Failed to load file due to an unexpected error"));
    EasyMock.replay(returnFile, view);

    final ApplicationPresenter presenter = new ApplicationPresenter();
    presenter.setView(view);
    presenter.onOpen();

    // Spin Wait
    while (!presenter.isDone()) {
      TimeUnit.SECONDS.sleep(1);
    }

    if (exception.get() != null) {
      throw exception.get();
    }
    EasyMock.verify(returnFile, view);
  }

  @Test
  public void testNoExistentFile() {
    final File returnFile = new File("Some Non Existent File");
    Assert.assertFalse(returnFile.isFile());

    final View view = EasyMock.createNiceMock(View.class);
    EasyMock.expect(view.showOpenFileChooser(null)).andReturn(returnFile);
    view.showWarning(EasyMock.eq("Open File"),
        EasyMock.eq("The file: '" + returnFile.getAbsolutePath() + "' is not a file"));
    EasyMock.replay(view);

    final Presenter presenter = new ApplicationPresenter();
    presenter.setView(view);
    presenter.onOpen();

    EasyMock.verify(view);
  }

}
